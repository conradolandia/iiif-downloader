name: Build and Release

on:
  push:
    tags:
      - 'v*'
  workflow_dispatch:

jobs:
  build:
    runs-on: ${{ matrix.os }}
    permissions:
      contents: read
      packages: read

    strategy:
      matrix:
        os: [ubuntu-latest, windows-latest, macos-latest]
        python-version: ['3.12']

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Install pixi
      uses: prefix-dev/setup-pixi@v0.9.1

    - name: Install dependencies
      shell: bash
      run: pixi install --frozen

    - name: Run tests
      shell: bash
      run: pixi run check

    - name: Build executable
      shell: bash
      run: pixi run build-exe

    - name: Test executable
      shell: bash
      run: |
        if [ "${{ matrix.os }}" = "windows-latest" ]; then
          ./dist/iiif-downloader.exe --help
        else
          ./dist/iiif-downloader --help
        fi
        echo "Executable test passed"

    - name: Upload artifacts
      uses: actions/upload-artifact@v4
      with:
        name: iiif-downloader-${{ matrix.os }}-${{ matrix.python-version }}-${{ github.sha }}
        path: dist/
        retention-days: 30

  release:
    needs: build
    runs-on: ubuntu-latest
    if: startsWith(github.ref, 'refs/tags/')
    permissions:
      contents: write
      packages: write

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.12'

    - name: Install pixi
      uses: prefix-dev/setup-pixi@v0.9.1

    - name: Install dependencies
      shell: bash
      run: pixi install --frozen

    - name: Download all artifacts
      uses: actions/download-artifact@v4
      with:
        path: artifacts/

    - name: Prepare release assets
      shell: bash
      run: |
        mkdir -p release-assets

        # Debug: List what we have in artifacts
        echo "=== Artifacts directory structure ==="
        find artifacts/ -type f -name "iiif-downloader*" 2>/dev/null || echo "No iiif-downloader files found"
        echo "=== All files in artifacts ==="
        find artifacts/ -type f 2>/dev/null || echo "No files found"
        echo "=== Directory listing ==="
        ls -la artifacts/ 2>/dev/null || echo "No artifacts directory"

        # Process artifacts from all platforms
        for artifact_dir in artifacts/*/; do
          if [ -d "$artifact_dir" ]; then
            # Extract platform and Python version from artifact name
            artifact_name=$(basename "$artifact_dir")
            echo "Processing artifact: $artifact_name"

            # Parse the artifact name to extract OS and create clean executable name
            if [[ "$artifact_name" == *"ubuntu-latest"* ]]; then
              platform="linux"
            elif [[ "$artifact_name" == *"macos-latest"* ]]; then
              platform="macos"
            elif [[ "$artifact_name" == *"windows-latest"* ]]; then
              platform="windows"
            else
              platform="unknown"
            fi

            # Create clean executable name
            if [ "$platform" = "windows" ]; then
              clean_name="iiif-downloader-${platform}.exe"
            else
              clean_name="iiif-downloader-${platform}"
            fi

            echo "Creating executable: $clean_name"
            echo "Artifact directory contents:"
            ls -la "$artifact_dir" 2>/dev/null || echo "Cannot list directory"

            # Look for executables in the artifact
            if [ -f "$artifact_dir/iiif-downloader" ]; then
              # Unix executable (Linux/macOS) - directly in artifact root
              echo "Found Unix executable: $artifact_dir/iiif-downloader"
              cp "$artifact_dir/iiif-downloader" "release-assets/$clean_name"
              chmod +x "release-assets/$clean_name"
            elif [ -f "$artifact_dir/iiif-downloader.exe" ]; then
              # Windows executable - directly in artifact root
              echo "Found Windows executable: $artifact_dir/iiif-downloader.exe"
              cp "$artifact_dir/iiif-downloader.exe" "release-assets/$clean_name"
            elif [ -f "$artifact_dir/dist/iiif-downloader" ]; then
              # Unix executable (Linux/macOS) - in dist subdirectory
              echo "Found Unix executable in dist: $artifact_dir/dist/iiif-downloader"
              cp "$artifact_dir/dist/iiif-downloader" "release-assets/$clean_name"
              chmod +x "release-assets/$clean_name"
            elif [ -f "$artifact_dir/dist/iiif-downloader.exe" ]; then
              # Windows executable - in dist subdirectory
              echo "Found Windows executable in dist: $artifact_dir/dist/iiif-downloader.exe"
              cp "$artifact_dir/dist/iiif-downloader.exe" "release-assets/$clean_name"
            else
              echo "No executable found in $artifact_dir"
            fi
          fi
        done

        # Debug: List what we created
        echo "=== Final release assets ==="
        ls -la release-assets/ 2>/dev/null || echo "No release assets created"

        # Create a comprehensive README for the release
        cat > release-assets/README.md << 'EOF'
        # IIIF Downloader Release

        This release contains executables for multiple platforms.

        ## Available Executables

        - `iiif-downloader-linux` - Linux executable (x86_64)
        - `iiif-downloader-macos` - macOS executable (Intel/ARM)
        - `iiif-downloader-windows.exe` - Windows executable

        ## Usage

        ### Linux/macOS
        ```bash
        # Make executable
        chmod +x iiif-downloader-linux
        chmod +x iiif-downloader-macos

        # Run
        ./iiif-downloader-linux --help
        ./iiif-downloader-macos --help
        ```

        ### Windows
        ```cmd
        # Run directly
        iiif-downloader-windows.exe --help
        ```

        ## Features

        - Download IIIF images from manifests
        - Progress tracking with rich terminal output
        - Adaptive rate limiting
        - Resume interrupted downloads
        - Single canvas/page download
        - Metadata extraction
        - Standalone executable (no Python required)

        ## Examples

        ```bash
        # Download all images
        ./iiif-downloader-linux-x86_64 --source "https://example.com/manifest.json" --output "images"

        # Download single page
        ./iiif-downloader-linux-x86_64 --source "https://example.com/manifest.json" --canvas 5 --output "page5"

        # Resume interrupted download
        ./iiif-downloader-linux-x86_64 --source "https://example.com/manifest.json" --output "images" --resume
        ```
        EOF

    - name: Create checksums
      run: |
        cd release-assets
        sha256sum * > checksums.txt

    - name: Create release
      uses: softprops/action-gh-release@v1
      with:
        files: |
          release-assets/*
        body: |
          ## ðŸŽ‰ IIIF Downloader Release

          ### What's New
          - ðŸš€ **Startup Progress Feedback** - See what the app is doing during startup
          - ðŸŽ¯ **Single Canvas Download** - Download specific pages with `--canvas` option
          - ðŸ“Š **Rich Progress Bars** - Beautiful terminal output with progress tracking
          - âš¡ **Adaptive Rate Limiting** - Respectful server requests
          - ðŸ”„ **Resume Functionality** - Continue interrupted downloads
          - ðŸ“„ **Metadata Extraction** - Save manifest information

          ### Features
          - **Standalone Executable** - No Python installation required
          - **Cross-Platform** - Works on Linux x86_64
          - **Multiple Python Versions** - Built with Python 3.11, 3.12, and 3.13
          - **Rich CLI** - Beautiful terminal interface with progress bars
          - **Resume Support** - Skip already downloaded files
          - **Rate Limiting** - Adaptive and configurable request rates
          - **Single Page Download** - Download specific canvases/pages
          - **Metadata Export** - Extract and save manifest information

          ### Quick Start

          ```bash
          # Download all images from a manifest
          ./iiif-downloader-linux-x86_64 --source "https://example.com/manifest.json" --output "images"

          # Download a specific page
          ./iiif-downloader-linux-x86_64 --source "https://example.com/manifest.json" --canvas 5 --output "page5"

          # Resume interrupted download
          ./iiif-downloader-linux-x86_64 --source "https://example.com/manifest.json" --output "images" --resume
          ```

          ### Installation

          1. Download the appropriate executable for your system
          2. Make it executable: `chmod +x iiif-downloader-linux-x86_64`
          3. Run: `./iiif-downloader-linux-x86_64 --help`

          ### Documentation

          See the [README](https://github.com/conradolandia/iiif-downloader) for full documentation and examples.
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
